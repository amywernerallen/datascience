lower = mean(s)-error
upper = mean(s)+error
lower_samples = c(lower_samples, lower)
upper_samples = c(upper_samples, upper)
n = n + 1
}
lower_samples
upper_samples
c <- ggplot(upper_samples)
df_us = data.frame(upper_samples)
c <- ggplot(df_us)
c + geom_bar
c + geom_bar()
head(df_us)
lower_samples = data.frame(lower_samples)
upper_samples = data.frame(upper_samples)
lower_samples$trial = c(1:50)
lower_samples = vector()
upper_samples = vector()
for(i in 1:50) {
s = sample(data$value.height, 50)
error = qt(0.975,df=length(s)-1)*sd(s)/sqrt(length(s))
lower = mean(s)-error
upper = mean(s)+error
lower_samples = c(lower_samples, lower)
upper_samples = c(upper_samples, upper)
}
lower_samples = data.frame(lower_samples)
upper_samples = data.frame(upper_samples)
lower_samples$trial = c(1:50)
upper_samples$trial = c(1:50)
head(lower_samples)
p1 + geom_bar()
qplot(trial, data=lower_sample, geom="bar")
qplot(trial, data=lower_samples, geom="bar")
qplot(lower_samples, data=lower_samples, geom="bar")
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar")
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", color = "light blue")
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", fill = "light blue")
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", fill = "blue")
lower_samples = vector()
upper_samples = vector()
for(i in 1:50) {
s = sample(data$value.height, 50)
error = qt(0.975,df=length(s)-1)*sd(s)/sqrt(length(s))
lower = mean(s)-error
upper = mean(s)+error
lower_samples = c(lower_samples, lower)
upper_samples = c(upper_samples, upper)
}
lower_samples = data.frame(lower_samples)
upper_samples = data.frame(upper_samples)
lower_samples$trial = c(1:50)
upper_samples$trial = c(1:50)
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", fill = "white")
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", fill = "white") + abline(h=lower)
new.plot()
dev.new()
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", fill = "white") + abline(h=lower)
plot.new()
qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", fill = "white") + abline(h=lower)
p1 = qplot(trial, data=lower_samples, weight = lower_samples, geom="bar", fill = "white")
p1 + abline(h=lower)
p1 = qplot(trial, data=lower_samples, weight = lower_samples, geom="bar")
p1 + abline(h=lower)
p1 = qplot(trial, data=lower_samples, weight = lower_samples, geom="bar")
p1 + geom_hline(yintercept=lower)
p1 = qplot(trial, data=lower_samples, weight = lower_samples, geom="bar")
p1 + geom_hline(yintercept=lower, color = "red")
data = data.frame(source("http://www.openintro.org/stat/data/nc.RData""))
data = data.frame(source("http://www.openintro.org/stat/data/nc.RData"))
data = data.frame(source("http://www.openintro.org/stat/data/nc.RData"))
data = source("http://www.openintro.org/stat/data/nc.RData")
head(data)
data = load("http://www.openintro.org/stat/data/nc.RData")
data = load(url("http://www.openintro.org/stat/data/nc.RData"))
head(data)
summary(data)
data
conn = 'http://www.openintro.org/stat/data/nc.RData'
conn = url('http://www.openintro.org/stat/data/nc.RData')
data = load(file = conn)
data
data = read.csv("/Users/amyewa/Documents/UW/Assignments/nc.csv")
head(data)
summary(data)
data$weeks
type(data$weeks)
head(data)
ggplot(aes(y = weight, x = habit, fill = weight), data = data) + geom_boxplot()
ggplot(aes(y = weight, x = habit), data = data) + geom_boxplot()
ggplot(aes(y = weight, x = habit), data = na.omit(data)) + geom_boxplot()
p = ggplot(aes(y = weight, x = habit, fill = habit), data = na.omit(data)) + geom_boxplot()
p + geom_point(position = position_jitter(width = 0.2))
p = ggplot(aes(y = weight, x = habit, fill = habit), data = na.omit(data)) + geom_boxplot()
p + geom_point(position = position_jitter(width = 0.2), alpha = 1/10)
by(nc$weight, nc$habit, mean)
by(nc$weight, nc$habit, std)
by(nc$weight, nc$habit, stdev)
by(nc$weight, nc$habit, sd)
m = by(nc$weight, nc$habit, mean)
s = by(nc$weight, nc$habit, sd)
m
m = as.dataframe(m)
m = data.frame(m)
dim(data[data$habit == "nonsmoker",])
dim(data[data$habit == "smoker",])
(7.144273-6.82873)(sqrt(1.518681^2/874 + 1.38618^2/127))
(7.144273-6.82873)*(sqrt(1.518681^2/874 + 1.38618^2/127))
(7.144273-6.82873)/(sqrt(1.518681^2/874 + 1.38618^2/127))
874+127-2
inference(y = data$weight, x = data$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
install.packages("inference")
library(inference)
inference(y = data$weight, x = data$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
inference(y = data$weight, x = data$habit, est = "mean", type = "ci", null = 0, alternative = "twosided", method = "theoretical")
inference(y = data$weight, x = data$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
load(url("http://www.openintro.org/stat/data/nc.RData"))
head(nc)
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
head(mbl11)
head(mlb11)
cor(mlb11$runs, mlb11$hits)
p = ggplot(mlb11, aes(runs, hits))
p + geom_point()
cfs = coef(lm(runs ~ hits, data = mlb11)
)
cfs
cf[1]
cfs[1]
cfs = coef(lm(runs ~ hits, data = mlb11))
p = ggplot(mlb11, aes(hits, runs))
p + geom_point() + geom_abline(intercept = cfs[1], slope = cfs[2])
cfs = coef(lm(runs ~ hits, data = mlb11))
p = ggplot(mlb11, aes(hits, runs))
p + geom_point() + geom_abline(intercept = cfs[1], slope = cfs[2], color="blue")
lm(runs~hits, data=mlb11)
summary(lm(runs~hits, data=mlb11))
head(faithful)
lm(eruptions~waiting, data=faithful)
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.stdres = rstandard(eruption.lm)
eruption.stdres
plot(faithful$waiting, eruption.stdres,
+     ylab="Standardized Residuals",
+     xlab="Waiting Time",
+     main="Old Faithful Eruptions")
plot(faithful$waiting, eruption.stdres,
ylab="Standardized Residuals",
xlab="Waiting Time",
main="Old Faithful Eruptions")
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.stdres = rstandard(eruption.lm)
plot(faithful$waiting, eruption.stdres,
ylab="Standardized Residuals",
xlab="Waiting Time",
main="Old Faithful Eruptions")
abline(0, 0)
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.stdres = rstandard(eruption.lm)
plot(faithful$waiting, eruption.stdres,
ylab="Standardized Residuals",
xlab="Waiting Time",
main="Old Faithful Eruptions")
abline(0, 0, color = "red")
abline(0, 0, col = "red")
eruption.lm = lm(eruptions ~ waiting, data=faithful)
eruption.stdres = rstandard(eruption.lm)
plot(faithful$waiting, eruption.stdres,
ylab="Standardized Residuals",
xlab="Waiting Time",
main="Old Faithful Eruptions")
abline(0, 0, col = "red")
qqnorm(eruption.stdres,
ylab="Standardized Residuals",
xlab="Normal Scores",
main="Old Faithful Eruptions")
qqline(eruption.stdres)
bins = seq(0, 500, by = 20)
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks = bins)
p2 = hist(s10, col=rgb(1,0,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p3 = hist(s50, col=rgb(1,1,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p4 = hist(s100, col=rgb(1,1,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
legend(350, 0.0125, c("All Data", "Sample 10", "Sample 50", "Sample 100"), fill=c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), rgb(1,1,0,1/4), rgb(1,1,1,1/4), bty = "n")
multiplot(p1, p2, p3, p4, cols=2)
library(ggplot2)
multiplot(p1, p2, p3, p4, cols=2)
library(easyGgplot2)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, cols=2)
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks = bins)
p2 = hist(s10, col=rgb(1,0,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p3 = hist(s50, col=rgb(1,1,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p4 = hist(s100, col=rgb(1,1,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
grid.arrange(p1, p2, p3, p4, cols=2)
grid.arrange(p1, p2, p3, p4, ncols=2, nrow = 2)
bins = seq(0, 500, by = 20)
par(mfrow=c(2,2))
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks = bins)
p2 = hist(s10, col=rgb(1,0,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p3 = hist(s50, col=rgb(1,1,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p4 = hist(s100, col=rgb(1,1,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
legend(350, 0.0125, c("All Data", "Sample 10", "Sample 50", "Sample 100"), fill=c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), rgb(1,1,0,1/4), rgb(1,1,1,1/4), bty = "n")
s10 = sample(data$value.weight, 10, replace=FALSE)
s50 = sample(data$value.weight, 50, replace=FALSE)
s100 = sample(data$value.weight, 100, replace=FALSE)
bins = seq(0, 500, by = 20)
par(mfrow=c(2,2))
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks = bins)
p2 = hist(s10, col=rgb(1,0,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p3 = hist(s50, col=rgb(1,1,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p4 = hist(s100, col=rgb(1,1,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
data = data.frame(source("http://www.openintro.org/stat/data/cdc.R"))
s50 = sample(data$value.weight, 50, replace=FALSE)
s100 = sample(data$value.weight, 100, replace=FALSE)
bins = seq(0, 500, by = 20)
par(mfrow=c(2,2))
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks = bins)
p2 = hist(s10, col=rgb(1,0,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p3 = hist(s50, col=rgb(1,1,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
p4 = hist(s100, col=rgb(1,1,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks = bins)
s10 = sample(data$value.weight, 10, replace=FALSE)
s50 = sample(data$value.weight, 50, replace=FALSE)
s100 = sample(data$value.weight, 100, replace=FALSE)
bins = seq(0, 500, by = 20)
par(mfrow=c(2,2))
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Original Data", breaks = bins)
p2 = hist(s10, col=rgb(1,0,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Sample Size 10", breaks = bins)
p3 = hist(s50, col=rgb(1,1,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Sample Size 50", breaks = bins)
p4 = hist(s100, col=rgb(1,1,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Sample Size 100", breaks = bins)
bins = seq(0, 500, by = 20)
par(mfrow=c(2,2))
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Original Data", breaks = bins)
p2 = hist(s10, col=rgb(1,0,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Sample Size 10", breaks = bins)
p3 = hist(s50, col=rgb(1,1,0,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Sample Size 50", breaks = bins)
p4 = hist(s100, col=rgb(1,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Sample Size 100", breaks = bins)
x <- seq(-5,3, 0.01)
densities = dnorm(x, 0,1)
cumulative = pnorm(x, 0, 1)
x <- seq(-5,3, 0.01)
densities = dnorm(x, 0,1)
cumulative = pnorm(x, 0, 1)
plot(x, densities, col="darkgreen",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="PDF of Standard Normal", cex.axis=.8)
plot(x, densities, col="blue",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="Normal Distribution", cex.axis=.8)
library(dplyr)
install.packages("dplyr")
install.packages("tidyr")
x <- seq(-5,3, 0.01)
densities = dnorm(x, 0,1)
cumulative = pnorm(x, 0, 1)
plot(x, densities, col="blue",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="Normal Distribution", cex.axis=.8)
plot(x, densities, col="blue",xlab="", ylab="Density", type="l",lwd=2, cex=2, main="Normal Distribution", cex.axis=.8)
male = tbl_df(d) %>% filter(sex ==1)
install.packages("plyr")
data = read.table(file = "http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data", sep=",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data_male = data[data$sex==1,]
data_female = data[data$sex==0,]
x = data_male$chol
h = hist(x, breaks=10, col="dark red", xlab="Cholesterol",
main="Histogram with Normal Curve")
xfit = seq(min(x),max(x),length=40)
yfit = dnorm(xfit,mean=mean(x),sd=sd(x))
yfit = yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
pnorm(260, mean=mean(x),sd=sd(x))
1 -pnorm(260, mean=mean(x),sd=sd(x))
data = data.frame(source("http://www.openintro.org/stat/data/cdc.R"))
h = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, main = "Weight Distributions", ylim=c(0, .01), xlab="Weight", breaks=20)
data_young = filter(data, age>=18, age<=30)
head(data)
data_young = filter(data, value.age>=18, value.age<=30)
data_young = filter(data, data$value.age>=18, data$value.age<=30)
bins = seq(0, 400, by = 20)
p1 = hist(data_young$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks=bins)
p2 = hist(s, col=rgb(1,0,0,1/4), add=T, freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks=bins)
legend(300, 0.0125, c("All Data", "Sample"), fill=c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), bty = "n")
s = sample(data_young$value.weight, 50, replace=FALSE)
data_young = data[data$value.age>17, ]
data_young = data_young[data_young$value.age<31, ]
bins = seq(0, 400, by = 20)
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks=bins)
p2 = hist(s, col=rgb(1,0,0,1/4), add=T, freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks=bins)
legend(300, 0.0125, c("All Data", "Sample"), fill=c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), bty = "n")
s = sample(data_young$value.weight, 50, replace=FALSE)
bins = seq(0, 400, by = 20)
p1 = hist(data$value.weight, col=rgb(0,0,1,1/4), freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main = "Histogram Comparison", breaks=bins)
p2 = hist(s, col=rgb(1,0,0,1/4), add=T, freq=FALSE, title = NULL, ylim=c(0, .015), xlab="Weight", main="Histogram Comparison", breaks=bins)
legend(300, 0.0125, c("All Data", "Sample"), fill=c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), bty = "n")
icecream <- data.frame(
temp=c(11.9, 14.2, 15.2, 16.4, 17.2, 18.1,
18.5, 19.4, 22.1, 22.6, 23.4, 25.1),
units=c(185L, 215L, 332L, 325L, 408L, 421L,
406L, 412L, 522L, 445L, 544L, 614L)
)
plot(units ~ temp, data=icecream, bty="n", lwd=2,
main="Ice cream Units Sold", col="#00526D",
xlab="Temperature (Celsius)",
ylab="Units sold")
axis(side = 1, col="grey")
axis(side = 2, col="grey")
model.0 = lm(units~temp, data = icecream)
summary(model.0)
c = ggplot(icecream, aes(units, temp))
c + stat_smooth(method=lm, fullrange=TRUE, alpha = 0.1) + geom_point()
library(ggplot2)
c = ggplot(icecream, aes(units, temp))
c + stat_smooth(method=lm, fullrange=TRUE, alpha = 0.1) + geom_point()
c + stat_smooth(method=lm, fullrange=TRUE, alpha = 0.1) + geom_point() + main(title ="Icecream Regression")
c = ggplot(icecream, aes(units, temp))
c + stat_smooth(method=lm, fullrange=TRUE, alpha = 0.1) + geom_point() + main(title ="Icecream Regression")
c = ggplot(icecream, aes(units, temp))
c + stat_smooth(method=lm, fullrange=TRUE, alpha = 0.1) + geom_point() + labs(title ="Icecream Regression")
students <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
head(students)
ggcorrel(students)
ggcorel(students)
ggcorr(students)
ggcorr(students)
install.packages("tm")
install.packages("wordcloud")
install.packages("slam")
install.packages("Devtools")
install.packages("devtools")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages("Irkernal")
library(twitteR)
library(reshape)
library(stringr)
library(lubridate)
install.packages("twitteR")
install.packages("reshape")
install.packages("stringr")
install.packages("lubridate")
install.packages("httr")
library(httr)
set_config(config(ssl_verifypeer = 0L))
install.packages("rmarkdown")
set_config(config(ssl_verifypeer = 0L))
getOption("repos")
options(repos = c(CRAN = "http://cran.rstudio.com"))
getOption("repos")
install.packages("rmarkdown")
setwd("~/Documents/Repositories/datascience/Kaggle/Titantic")
titanic.train = read.csv("train.csv", header = TRUE, stringsAsFactors = FALSE)
titanic.train$IsTrain = TRUE
titanic.test = read.csv("test.csv", header = TRUE, stringsAsFactors = FALSE)
titanic.test$IsTrain = FALSE
head(titatntic.train)
head(titanic.test)
head(titantic.train)
head(titanic.train)
titanic.test$Survived = NA
titanic = rbind(titanic.train, titanic.test)
head(titantic)
head(titanic)
str(titantic)
str(titanic)
table(titanic, IsTrain)
table(titanic, titanic$IsTrain)
table(titanic$IsTrain)
tail(titanic)
str(titanic)
table(titanic$Sex)
qplot(Age, data=titanic, weight=Fare, geom="histogram", binwidth=0.1)
ggtitle("Monthly Visitors to Mount Rainier") +
scale_y_continuous(name="Average Number of Visitors", labels = comma) +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
qplot(Age, data=titanic, weight=Fare, geom="histogram", binwidth=0.1) +
ggtitle("Monthly Visitors to Mount Rainier") +
scale_y_continuous(name="Average Number of Visitors", labels = comma) +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
library(ggplot2)
qplot(Age, data=titanic, weight=Fare, geom="histogram", binwidth=0.1) +
ggtitle("Monthly Visitors to Mount Rainier") +
scale_y_continuous(name="Average Number of Visitors", labels = comma) +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
library(twitteR)
library(reshape)
library(stringr)
library(lubridate)
library(ggplot2)
qplot(Age, data=titanic, weight=Fare, geom="histogram", binwidth=0.1) +
ggtitle("Monthly Visitors to Mount Rainier") +
scale_y_continuous(name="Average Number of Visitors", labels = comma) +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
qplot(Age, data=titanic, weight=Fare, geom="histogram", binwidth=0.1) +
ggtitle("Monthly Visitors to Mount Rainier") +
scale_y_continuous(name="Average Number of Visitors") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
qplot(Age, data=titanic, weight=Fare, geom="histogram") +
ggtitle("Monthly Visitors to Mount Rainier") +
scale_y_continuous(name="Average Number of Visitors") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
qplot(Age, data=titanic, weight=Fare, geom="histogram") +
ggtitle("Age Distribution on Titanic") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
qplot(Age, data=titanic, fill=Fare, geom="histogram") +
ggtitle("Age Distribution on Titanic") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
qplot(Age, data=titanic, color="darkblue", geom="histogram") +
ggtitle("Age Distribution on Titanic") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
qplot(Age, data=titanic, color="dark blue", geom="histogram") +
ggtitle("Age Distribution on Titanic") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
ggplot2(titanic, aes(x=Age)) +
geom_histogram() +
ggtitle("Age Distribution on Titanic") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
ggplot(titanic, aes(x=Age)) +
geom_histogram() +
ggtitle("Age Distribution on Titanic") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
ggplot(titanic, aes(x=Age)) +
geom_histogram(colour="darkblue", fill="lightblue") +
ggtitle("Age Distribution on Titanic") +
scale_fill_gradient(low = "light blue", high = "orchid4", guide=FALSE) +
theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"), panel.background = element_rect(colour = "darkblue"))
titanic$Age
dim(is.na(titanic$Age))
length(is.na(titanic$Age))
length(is.na(titanic$Age)==TRUE)
titanic[titanic$age==NA,]
titanic[,titanic$age==NA]
titanic[,titanic$age=NA]
titanic[,is.na(titanic$age)==TRUE]
titanic[is.na(titanic$age)==TRUE]
titanic[is.na(titanic$age)==TRUE,]
table(titanic$Age)
sum(is.na(titanic$Age))
sum(is.na(titanic$Sex))
table(titanic$Survived)
342/(342+549)
ggplot(titanic, aes(survived, fill=sex)) + geom_bar()
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar()
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar() +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank())
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar() +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=(0,1))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar() +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar() +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar(width=0.5) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar(width=0.5) +
scale_fill_manual(values=c("#F8766D", "#00BA38")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar(width=0.5) +
scale_fill_manual(values=c("#FFCCFF", "#99CCFF")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar(width=0.5) +
scale_fill_manual(values=c("#CC66CC", "#99CCFF")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar(width=0.5) +
scale_fill_manual(values=c("#CC3399", "#99CCFF")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) + geom_bar(width=0.5) +
scale_fill_manual(values=c("#CC3399", "#6699FF")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) +
geom_bar(width = 0.8, position = position_dodge(width = 0.9)) +
scale_fill_manual(values=c("#CC3399", "#6699FF")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Sex)) +
geom_bar(width = 0.8) +
scale_fill_manual(values=c("#CC3399", "#6699FF")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Pclass)) +
geom_bar(width = 0.8) +
scale_fill_manual(values=c("#CC3399", "#6699FF", "66CC00")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
head(titanic)
ggplot(titanic, aes(Survived, fill=Pclass)) +
geom_bar(width = 0.8) +
# scale_fill_manual(values=c("#CC3399", "#6699FF", "66CC00")) +
theme(panel.grid.minor=element_blank(),panel.grid.major=element_blank()) +
scale_x_continuous(breaks=c(0,1), labels=c("No", "Yes"))
ggplot(titanic, aes(Survived, fill=Pclass)) +
geom_bar(width = 0.8)
